var searchIndex = JSON.parse('{\
"dntk_matrix":{"doc":"","t":[0,0,0,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["heap","matrix","multi_dim","0","Heaped","borrow","borrow_mut","clone","clone_into","fmt","from","from","index","into","into","new","to_owned","try_from","try_into","type_id","0","1","Matrix","add","add","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","index","into","lu_decomposition","map","mul","mul","mul","neg","new","solve_eqn","sub","sub","to_owned","to_string","transpose","try_from","try_into","type_id","0","MultiMatrix","add","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","ne","to_owned","to_string","try_from","try_into","type_id"],"q":["dntk_matrix","","","dntk_matrix::heap","","","","","","","","","","","","","","","","","dntk_matrix::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dntk_matrix::multi_dim","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Matrix M[N x M]","A + B","A + k","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","LU decomposition","Apply f to all value","A * B","A * B","A * k","A","generate Matrix","Solve Ax = b A: N x N b: N","A - B","A - k","","","A^t","","","","","Matrix [[N x M] x L]","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["heaped",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["usize",0]]],[[]],[[]],[[["box",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["matrix",3]]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["matrix",3]],[[["",0],["",0]]],[[["",0],["matrix",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0]]],[[]],[[["",0]]],[[],["matrix",3]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[]],[[["matrix",3],["matrix",3]],["matrix",3]],[[["matrix",3]]],[[]],[[["",0]]],[[["",0]],["string",3]],[[],["matrix",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["multimatrix",3]],[[["",0],["",0]]],[[["",0],["multimatrix",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["multimatrix",3]],["bool",0]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Heaped"],[3,"Matrix"],[3,"MultiMatrix"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};